From johnc@idcube.idsoftware.com Thu Aug 25 14:48:29 1994
Date: Wed, 24 Aug 94 19:38:27 -0600
From: John Carmack <johnc@idcube.idsoftware.com>
To: jimt@crl.com
Subject: sndlink

I think the sounds were all 22khz 16 bit samples, but it has been a  
LOOOONG time since I looked at that stuff.

I think you have the cmdlib.[ch] files from other stuff.  Here is  
sndlink.c:

#include <libc.h>
#include "cmdlib.h"
#include "scriplib.h"

#define	MAXSAMPLES	64
unsigned	short fileorg[MAXSAMPLES][2];

unsigned	sharedofs[MAXSAMPLES];
unsigned	sharedlen[MAXSAMPLES];


/*
=============
=
= main
=
sound ram:
$200	driver program
$600	64 entry sample table (ushort start, ushort loop)
$700	sample data

generates
---------
sounds.bin
contains the driver and all static samples

shsnds.bin
contains all the space shared samples

sounds.h
countains the sample numbers

sounds.c
contains the offset/lengths of shared sounds
start of shared area in sound ram

=============
*/

void main (void)
{
	int		i, fx, handle, shnum, loop;
	int		staticfile, sharedfile;
	long	org, length;
	int		overload, maxoversize;
	FILE	*header;
	unsigned	short vals[2], u;
	unsigned	sharedsize;
	void	*buffer;
	char	name[256];

	printf ("sndlink 0.1 by John Carmack\n");
	LoadScriptFile ("sndlink.txt");

	header = fopen ("sounds.h","w");
	fprintf (header,"/* generated by sndlink.exe */\n\n");
	fprintf (header,"enum {\n");
	staticfile = SafeOpenWrite ("sounds.bin");

// leave space for header
	lseek (staticfile,4,SEEK_CUR);

// copy the driver
	length = LoadFile ("driver",&buffer);
	SafeWrite (staticfile,buffer, length);
	free (buffer);

// leave space for sample table (64 samples*4)
	lseek (staticfile,0x504,SEEK_SET); // samples start at ram  
org 0x900

	fx = 0;
	org = 0x700;
	
//
// copy instruments
//
	while (1)
	{
		GetToken (true);	// get sound name
		if (endofscript)
			break;

		if (!strcmpi(token,"$static"))
			break;

		strcpy (name, token);
		strcat (name,".sol");
		strupr (token);
		fprintf (header,"%s,\n",token);
		length = LoadFile (name,&buffer);
		length -= 0x40;	// don't need header
		loop = *(unsigned int *)(buffer+4);
		loop = 9*(loop/16);
		SafeWrite (staticfile,buffer + 0x40, length);
		fileorg[fx][0] = org;
		fileorg[fx][1] = org + loop;
		printf ("0x%4x	/ 0x%4x   
%s\n",(unsigned)fileorg[fx][0],(unsigned)fileorg[fx][1],token);
		org += length;
		free (buffer);
		fx++;
	}

//
// copy static sounds sounds
//
	while (1)
	{
		GetToken (true);	// get sound name
		if (endofscript)
			break;

		if (!strcmpi(token,"$shared"))
			break;

		printf ("0x%4x	%s\n",(unsigned)org,token);
		strcpy (name, token);
		if (!strcmp(name+strlen(name)-4,".sol") )
		{	// instrument file
		
		}
		strcat (name,".sns");
		strupr (token);
		fprintf (header,"%s,\n",token);
		length = LoadFile (name,&buffer);
		
		SafeWrite (staticfile,buffer, length);
		fileorg[fx][0] = fileorg[fx][1] = org;
		org += length;
		free (buffer);
		fx++;
	}
//
// write the upload information for the shared file
//
	for (i = fx ; i<MAXSAMPLES ; i++)
		fileorg[i][0] = fileorg[i][1] = org;	// all the  
rest share space

	vals[0] = 0;				// total length
	vals[1] = 0x200;			// execution start  
address
	SafeWrite (staticfile,vals,4);

	lseek (staticfile,0,SEEK_SET);
	vals[0] = org - 0x200;		// total length
	vals[1] = 0x200;			// org in sound ram
	SafeWrite (staticfile,vals,4);

	lseek (staticfile,0x404,SEEK_SET);
	SafeWrite (staticfile,fileorg,sizeof(fileorg));

	close (staticfile);

	sharedsize = 0xffc0 - org;		// no shared sounds  
can be larger
	printf ("0x%4lx	end static data (0x%4x bytes for  
shared)\n\n",org,sharedsize);
	if (org > 0xffc0)
		Error ("ERROR: static data too large");

//
// build the shared sample file
//
	sharedfile = SafeOpenWrite ("shsounds.bin");
	org = 0;
	shnum = 0;

	while (1)
	{
		GetToken (true);	// get sound name
		if (endofscript)
			break;

		printf ("0x%4x	%s\n",(unsigned)org,token);
		strcpy (name, token);
		strcat (name,".sns");
		length = LoadFile (name,&buffer);
		if (length > sharedsize)
			Error ("ERROR: sample larger than shared  
space");
		strupr (token);
		fprintf (header,"%s,\n",token);
		sharedofs[shnum] = org;
		sharedlen[shnum] = (length+2)/3;
		SafeWrite (sharedfile,buffer, length);
		org+=length;
		free (buffer);
		shnum++;
	}

	printf ("0x%4x	end of shared data\n",org);
	close (sharedfile);


	fprintf (header,"NUMSOUNDS };\n\n");
	fprintf (header,"#define SHAREDSTART %i\n",fx);
	fprintf (header,"#define SHAREDORG 0x%x\n",fileorg[fx][0]);
	fclose (header);

//
// write the shared sound directory file
//
	header = fopen ("sounds.c","w");
	fprintf (header,"/* generated by sndlink.exe */\n\n");
	fprintf (header,"unsigned sharedofs[] = {\n");
	for (i=0 ; i<shnum ; i++)
		fprintf (header,"0x%x,\n",sharedofs[i]);
	fprintf (header,"0};\n\n");

	fprintf (header,"unsigned sharedlen[] = {\n");
	for (i=0 ; i<shnum ; i++)
		fprintf (header,"0x%x,\n",sharedlen[i]);
	fprintf (header,"0};\n\n");
}



